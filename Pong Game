import simplegui
import random
# Initialize globals
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

paddle1_pos = [0, HEIGHT/2]
paddle2_pos = [WIDTH, HEIGHT/2]
paddle1_vel = [0, 0]
paddle2_vel = [0, 0]

ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [-5,5]
score1 = 0
score2 = 0

def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = [0, HEIGHT/2]
    paddle2_pos = [WIDTH, HEIGHT/2]
    score1 = 0
    score2 = 0
    if score1 >= score2:  
        spawn_ball(LEFT)  
    else:  
        spawn_ball(RIGHT) 

# Initialize ball_pos and ball_vel for new ball in middle of table   
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists  
    ball_pos = [WIDTH/2, HEIGHT/2];    
    ball_vel = [random.randrange(2, 6),random.randrange(2, 6)]
    if direction == LEFT:
        ball_vel[0] = -ball_vel[0]
        ball_vel[1] = -ball_vel[1]
    elif direction == RIGHT:
        ball_vel[1] == -ball_vel[1]

# Define event handlers
def draw(canvas):
    global paddle1_pos
    global paddle2_pos
    global paddle1_vel
    global paddle2_vel
    global PAD_HEIGHT
    global score1, score2
    
    # Update paddles' position
    # Keep both paddles on screen
    if HALF_PAD_HEIGHT <= paddle1_pos[1] + paddle1_vel[1] <= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos[1] += paddle1_vel[1]
    if HALF_PAD_HEIGHT <= paddle2_pos[1] + paddle2_vel[1] <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos[1] += paddle2_vel[1]
    
    # Draw ball and paddles
    canvas.draw_polygon(([0,paddle1_pos[1]-PAD_HEIGHT/2],[PAD_WIDTH,paddle1_pos[1]-PAD_HEIGHT/2],[PAD_WIDTH,paddle1_pos[1]+PAD_HEIGHT/2],[0,paddle1_pos[1]+PAD_HEIGHT/2]),2,'White')
    canvas.draw_polygon(([WIDTH,paddle2_pos[1]-PAD_HEIGHT/2],[WIDTH - PAD_WIDTH ,paddle2_pos[1]-PAD_HEIGHT/2],[WIDTH - PAD_WIDTH,paddle2_pos[1]+PAD_HEIGHT/2],[WIDTH,paddle2_pos[1]+PAD_HEIGHT/2]),2,'White')
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
    canvas.draw_text(str(score1)+"  :  "+str(score2), (WIDTH / 2 - 60, 40), 36, "Yellow")  
    
    # Update ball's position
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # Update direction after collision
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    # Judge winner, add point and restart
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:    
        if paddle1_pos[1] - PAD_HEIGHT/2 <= ball_pos[1]<=paddle1_pos[1] + PAD_HEIGHT/2:    
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] += 1
        else:
            spawn_ball(RIGHT)
            score2 += 1
    elif ball_pos[0] >= WIDTH-BALL_RADIUS - PAD_WIDTH:    
        if paddle2_pos[1] - PAD_HEIGHT/2 <= ball_pos[1] <= paddle2_pos[1] + PAD_HEIGHT/2:    
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] += 1
        else:
            spawn_ball(LEFT)
            score1 += 1
          
# Define key operation
def keydown(key):
    vel= 4
    global paddle1_vel, paddle2_vel  
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel[1] += vel
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= vel
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel[1] -= vel
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel[1] += vel
        
def keyup(key):
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 0
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = 0
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel[1] = 0
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel[1] = 0
        
    
# create frame 
frame = simplegui.create_frame("Velocity ball control", WIDTH, HEIGHT)

# register event handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# start frame
frame.start()
