# implementation of card game - Memory

import simplegui
import random

# helper function to initialize globals
def new_game():
    global card_val, exposed, state, turn
    state = 0
    turn =0
    card_val = [i%8 for i in range(16)]
    random.shuffle(card_val)
    exposed = [False for i in range(16)]	#Initialize, 16 False in exposed[]
    label.set_text("Turns = " + str(turn))

     
# define event handlers
def mouseclick(pos):
    # add game state logic here
    global state, choice, click1, click2, turn
    choice = int(pos[0]/50)	#Based on the mouse click position to determine which card is chosed
    if state == 0:
        state = 1
        click1 = choice	#Number of card being chosed
        exposed[click1] = True
    elif state == 1:
        if not exposed[choice]:  
            state = 2  
            click2 = choice  
            exposed[click2] = True  
    elif state == 2:  
        if not exposed[choice]:  
            state = 1
            if not card_val[click1] == card_val[click2]:  
                exposed[click1] = exposed[click2] = False  
            click1 = choice  
            exposed[click1] = True  
            turn += 1  
    label.set_text("Turns = "+str(turn))
    
                        
# cards are logically 50x100 pixels in size    
def draw(canvas):
    global exposed
    
    for i in range(16):
        if exposed[i]:
            canvas.draw_polygon([(50*i, 0),(50*i+50,0),(50*i+50,100),(50*i,100)],3,'White','Grey')  
            canvas.draw_text(str(card_val[i]), (50*i+20,60), 30, 'White')  
        else:  
            canvas.draw_polygon([(50*i, 0),(50*i+50,0),(50*i+50,100),(50*i,100)],3,'White','Green')


# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
